 function client = client_process(client);

   % make entire screen white
    ss = get(0,'screensize');
    ss = [1 1 1024 768];
    figwhite = figure;
    set(gcf,'position',ss);
    set(gcf,'color',[1 1 1]);
  
   % compute figure position and add to client
     figsize = client.figureSize;
     if length(figsize) < 2
        ss = get(0,'screenSize');  
        figsize(1) = .9 *ss(3);
        figsize(2) = .9 *ss(4);
     end;   
     figw = figsize(1);
     figh = figsize(2);
     ss = get(0,'screenSize');
     x1 = (ss(3) - figw)/2;
     x2 = (ss(4) - figh)/2;
     client.figurePosition = [x1 x2 figw figh];

   % ------------ get vectors of mortality rates for person 1
   % make vectors for rows and columns of mortality tables
      ages = [50:1:120]';     % ages (rows in mortality tables)
      years = [2014:1:2113];  % years (columns in mortality tables)
   % compute mortalities for person 1
      if client.p1Sex == 'M'
          m1 = getRP2014Male();   % get mortalities for 2014
          m2 = getMP2014Male();   % get mortality improvement rates 2015-2027
      else;
          m1 = getRP2014Female(); % get mortalities for 2014
          m2 = getMP2014Female();   % get mortality improvement rates 2015-2027
      end
   % extend mortality improvement rates to 2113 using ultimate rates for 2027
      m2027 = m2(:,13);
      m3 =  m2027*ones(1,86);
   % make mortality table from 2014 through 2113
      m4 = [m1 1-m2 1-m3]; % join 2014 mortality and mortality factors (1 - improvement)
      mortTable = cumprod(m4')'; % multiply 2014 mortality by cumulative factors
   % get vector of mortality rates for p1Age to age 120 beginning in client.year  
      rowNumber =  find(ages == client.p1Age); % find row for p1 age
      colNumber =  find(years == client.Year); % fund column for current year
      m5 = mortTable(rowNumber:size(m4,1),colNumber:size(m4,2)); % create new matrix
      mortP1 = diag(m5)';
      
   % ------------ get vectors of mortality rates for person 2
   % make vectors for rows and columns of mortality tables
      ages = [50:1:120]';     % ages (rows in mortality tables)
      years = [2014:1:2113];  % years (columns in mortality tables)
   % compute mortalities for person 2
      if client.p2Sex == 'M'
          m1 = getRP2014Male();   % get mortalities for 2014
          m2 = getMP2014Male();   % get mortality improvement rates 2015-2027
      else;
          m1 = getRP2014Female(); % get mortalities for 2014
          m2 = getMP2014Female();   % get mortality improvement rates 2015-2027
      end
   % extend mortality improvement rates to 2113 using ultimate rates for 2027
      m2027 = m2(:,13);
      m3 =  m2027*ones(1,86);
   % make mortality table from 2014 through 2113
      m4 = [m1 1-m2 1-m3]; % join 2014 mortality and mortality factors (1 - improvement)
      mortTable = cumprod(m4')'; % multiply 2014 mortality by cumulative factors
   % get vector of mortality rates for p1Age to age 120 beginning in client.year  
      rowNumber =  find(ages == client.p2Age); % find row for p1 age
      colNumber =  find(years == client.Year); % fund column for current year
      m5 = mortTable(rowNumber:size(m4,1),colNumber:size(m4,2)); % create new matrix
      mortP2 = diag(m5)';
   % ----- extend shorter of mortality vectors to length of longer
      ncols =  max(length(mortP1),length(mortP2)); % number of columns in longer vector
      mortP1 = [mortP1 ones(1,ncols-length(mortP1))]; 
      mortP2 = [mortP2 ones(1,ncols-length(mortP2))];
   % ---- add zero mortality for year 1
      mortP1 = [0 mortP1];
      mortP2 = [0 mortP2];
      ncols = ncols+1;
   % add mortalities to client data structure
      client.mortP1 = mortP1;
      client.mortP2 = mortP2;
      
   % make personal state matrix
     nrows = client.nScenarios;  % number of rows in scenario matrices
     % person 1
        probs = ones(nrows,1)*mortP1; % probabilities of dying
        randnums = rand(nrows,ncols); % random numbers
        statesP1 = double(randnums >= probs);    % 1 if alive, 0 if dead
        statesP1 = cumprod(statesP1')';     % survivals, 1 if alive, 0 if dead
     % person 2  
        probs = ones(nrows,1)*mortP2; % probabilities of dying
        randnums = rand(nrows,ncols); % random numbers
        statesP2 = double(randnums >= probs);    % 1 if alive, 0 if dead
        statesP2 = cumprod(statesP2')';     % survivals, 1 if alive, 0 if dead
        statesP2 =  2*statesP2;            % code as 2 for person 2
     % add person 1 and person 2
        states = statesP1 + statesP2;
     % add estate (4) whenever 0 preceded by 1,2, or 3   
        estates =  (states(:,2:ncols)==0) & (states(:,1:ncols-1)>0);
        estates = [zeros(nrows,1) estates];
        states = states + 4*estates;

     % put in client scenario matrix      
        client.pStatesM = states;

   % compute life expectancy for p1
       surv1 = cumprod(1 - mortP1);
       ncols =  length(surv1);
       propdie = surv1(1:ncols-1) - surv1(2:ncols);
       client.p1LE = sum(propdie.*(1:1:length(propdie)));
       client.p1LE = .1*round(client.p1LE*10);
   % compute life expectancy for p2
       surv2 = cumprod(1 - mortP2);
       ncols =  length(surv2);
       propdie = surv2(1:ncols-1) - surv2(2:ncols);
       client.p2LE = sum(propdie.*(1:1:length(propdie)));
       client.p2LE = .1*round(client.p2LE*10);
       
   % create empty client incomes matrix
       client.incomesM = zeros(size(client.pStatesM));
   % create empty client fees matrix    
       client.feesM =    zeros(size(client.pStatesM));
 end
       

function mat = getRP2014Male();
   % gets a vector of mortality rates for all male healthy annuitants
   % ages 50-120 from the RP-2014 table
    mat = [.004064  .004384  .004709  .005042  .005384 ...
           .005735  .006099  .006478  .006877  .007305 ...
           .007771  .008284  .008854  .009492  .010209 ...
           .011013  .011916  .012930  .014067  .015342 ...
           .016769  .018363  .020141  .022127  .024345 ...
           .026826  .029608  .032735  .036258  .040232 ...
           .044722  .049795  .055526  .061996  .069290 ...
           .077497  .086712  .097038  .108591  .121499 ...
           .135908  .151322  .167422  .184030  .201074 ...
           .218559  .236535  .255059  .274170  .293848 ...
           .313988  .334365  .354599  .374524  .393982 ...
           .412831  .430946  .448227  .464592  .479987 ...
           .494376  .500000  .500000  .500000  .500000 ...
           .500000  .500000  .500000  .500000  .500000 ...
          1.000000]';
end

function mat = getRP2014Female();
   % gets a vector of mortality rates for all female healthy annuitants
   % ages 50-120 from the RP-2014 table
    mat = [.002768  .002905  .003057  .003225  .003412 ...
           .003622  .003858  .004128  .004436  .004789 ...
           .005191  .005646  .006156  .006723  .007352 ...
           .008048  .008821  .009679  .010633  .011692 ...
           .012868  .014171  .015614  .017210  .018977 ...
           .020938  .023118  .025554  .028288  .031366 ...
           .034844  .038783  .043246  .048305  .054032 ...
           .060504  .067801  .076012  .085230  .095563 ...
           .107126  .119744  .133299  .147720  .162971 ...
           .179034  .195903  .213565  .231991  .251123 ...
           .270858  .291040  .311444  .331900  .352232 ...
           .372273  .391860  .410849  .429112  .446544 ...
           .463061  .478604  .493137  .500000  .500000 ...
           .500000  .500000  .500000  .500000  .500000 ...
           1.000000]'; 
end
   
function mat = getMP2014Male();
  % gets a matrix of mortality improvement rates for all male healthy annuitants
  % ages 50-120 for years 2015 through 2027from the MP-2014 table
   mat = [0.0233 0.0221 0.0205 0.0188 0.0170 0.0153 0.0138 0.0126 0.0116 0.0109 0.0104 0.0101 0.0100
          0.0226 0.0216 0.0203 0.0188 0.0171 0.0154 0.0139 0.0127 0.0116 0.0109 0.0104 0.0101 0.0100
          0.0217 0.0210 0.0200 0.0186 0.0171 0.0155 0.0141 0.0128 0.0117 0.0109 0.0104 0.0101 0.0100
          0.0195 0.0192 0.0185 0.0175 0.0162 0.0149 0.0136 0.0125 0.0115 0.0108 0.0103 0.0101 0.0100
          0.0170 0.0171 0.0167 0.0160 0.0151 0.0141 0.0131 0.0121 0.0113 0.0107 0.0103 0.0101 0.0100
          0.0145 0.0150 0.0150 0.0146 0.0140 0.0133 0.0125 0.0117 0.0111 0.0106 0.0102 0.0100 0.0100
          0.0121 0.0130 0.0134 0.0134 0.0131 0.0126 0.0120 0.0114 0.0109 0.0105 0.0102 0.0100 0.0100
          0.0103 0.0113 0.0121 0.0125 0.0124 0.0121 0.0117 0.0113 0.0108 0.0104 0.0102 0.0100 0.0100
          0.0091 0.0102 0.0111 0.0117 0.0120 0.0118 0.0116 0.0112 0.0108 0.0104 0.0102 0.0100 0.0100
          0.0084 0.0096 0.0105 0.0112 0.0117 0.0118 0.0116 0.0112 0.0109 0.0105 0.0102 0.0101 0.0100
          0.0082 0.0094 0.0103 0.0110 0.0115 0.0117 0.0117 0.0113 0.0110 0.0106 0.0103 0.0101 0.0100
          0.0082 0.0093 0.0103 0.0110 0.0115 0.0117 0.0117 0.0115 0.0111 0.0107 0.0103 0.0101 0.0100
          0.0084 0.0094 0.0103 0.0110 0.0115 0.0117 0.0117 0.0116 0.0112 0.0108 0.0104 0.0101 0.0100
          0.0089 0.0095 0.0103 0.0110 0.0115 0.0117 0.0117 0.0116 0.0113 0.0108 0.0104 0.0101 0.0100
          0.0096 0.0098 0.0103 0.0109 0.0114 0.0116 0.0117 0.0115 0.0112 0.0108 0.0104 0.0101 0.0100
          0.0105 0.0103 0.0104 0.0108 0.0112 0.0115 0.0116 0.0114 0.0112 0.0108 0.0104 0.0101 0.0100
          0.0118 0.0110 0.0107 0.0108 0.0110 0.0113 0.0114 0.0113 0.0111 0.0108 0.0104 0.0101 0.0100
          0.0132 0.0120 0.0113 0.0110 0.0110 0.0111 0.0112 0.0112 0.0110 0.0107 0.0104 0.0101 0.0100
          0.0147 0.0132 0.0121 0.0114 0.0111 0.0110 0.0110 0.0110 0.0109 0.0106 0.0104 0.0101 0.0100
          0.0161 0.0145 0.0132 0.0121 0.0114 0.0111 0.0110 0.0109 0.0108 0.0106 0.0103 0.0101 0.0100
          0.0174 0.0158 0.0143 0.0130 0.0120 0.0114 0.0110 0.0108 0.0107 0.0105 0.0103 0.0101 0.0100
          0.0186 0.0170 0.0154 0.0140 0.0127 0.0118 0.0112 0.0109 0.0106 0.0105 0.0103 0.0101 0.0100
          0.0195 0.0180 0.0164 0.0149 0.0135 0.0124 0.0116 0.0110 0.0106 0.0104 0.0102 0.0101 0.0100
          0.0202 0.0188 0.0172 0.0157 0.0143 0.0130 0.0120 0.0112 0.0107 0.0104 0.0102 0.0101 0.0100
          0.0208 0.0194 0.0179 0.0164 0.0150 0.0136 0.0125 0.0115 0.0109 0.0105 0.0102 0.0101 0.0100
          0.0212 0.0198 0.0184 0.0169 0.0155 0.0141 0.0129 0.0119 0.0111 0.0106 0.0102 0.0101 0.0100
          0.0215 0.0201 0.0187 0.0173 0.0159 0.0145 0.0133 0.0122 0.0113 0.0107 0.0103 0.0101 0.0100
          0.0217 0.0203 0.0189 0.0175 0.0161 0.0148 0.0135 0.0124 0.0115 0.0108 0.0103 0.0101 0.0100
          0.0219 0.0204 0.0190 0.0176 0.0162 0.0150 0.0137 0.0126 0.0116 0.0109 0.0104 0.0101 0.0100
          0.0220 0.0205 0.0191 0.0176 0.0163 0.0150 0.0138 0.0127 0.0117 0.0110 0.0104 0.0101 0.0100
          0.0220 0.0206 0.0191 0.0177 0.0163 0.0150 0.0138 0.0128 0.0118 0.0110 0.0104 0.0101 0.0100
          0.0220 0.0206 0.0191 0.0177 0.0163 0.0150 0.0138 0.0127 0.0118 0.0111 0.0105 0.0101 0.0100
          0.0220 0.0206 0.0191 0.0177 0.0163 0.0149 0.0137 0.0127 0.0118 0.0111 0.0105 0.0101 0.0100
          0.0219 0.0206 0.0191 0.0177 0.0163 0.0149 0.0137 0.0126 0.0117 0.0110 0.0105 0.0101 0.0100
          0.0217 0.0205 0.0191 0.0177 0.0163 0.0149 0.0137 0.0126 0.0117 0.0109 0.0104 0.0101 0.0100
          0.0215 0.0203 0.0191 0.0177 0.0163 0.0149 0.0137 0.0126 0.0116 0.0109 0.0104 0.0101 0.0100
          0.0213 0.0201 0.0189 0.0176 0.0162 0.0149 0.0136 0.0125 0.0115 0.0108 0.0102 0.0099 0.0099
          0.0210 0.0199 0.0187 0.0174 0.0161 0.0148 0.0135 0.0124 0.0114 0.0106 0.0101 0.0098 0.0097
          0.0207 0.0196 0.0184 0.0172 0.0160 0.0147 0.0135 0.0123 0.0113 0.0105 0.0099 0.0096 0.0096
          0.0203 0.0193 0.0182 0.0170 0.0157 0.0145 0.0134 0.0122 0.0112 0.0104 0.0098 0.0095 0.0094
          0.0200 0.0190 0.0178 0.0167 0.0154 0.0142 0.0131 0.0121 0.0111 0.0103 0.0097 0.0093 0.0093
          0.0195 0.0185 0.0175 0.0163 0.0151 0.0139 0.0128 0.0118 0.0109 0.0101 0.0095 0.0092 0.0091
          0.0190 0.0181 0.0170 0.0159 0.0147 0.0136 0.0125 0.0115 0.0106 0.0100 0.0094 0.0090 0.0090
          0.0183 0.0175 0.0165 0.0154 0.0143 0.0132 0.0121 0.0112 0.0103 0.0097 0.0092 0.0089 0.0088
          0.0176 0.0168 0.0159 0.0149 0.0138 0.0128 0.0118 0.0108 0.0100 0.0094 0.0089 0.0087 0.0087
          0.0168 0.0161 0.0152 0.0143 0.0133 0.0123 0.0113 0.0104 0.0097 0.0090 0.0086 0.0084 0.0085
          0.0159 0.0153 0.0145 0.0136 0.0126 0.0117 0.0108 0.0099 0.0092 0.0086 0.0082 0.0080 0.0081
          0.0151 0.0145 0.0137 0.0129 0.0120 0.0111 0.0102 0.0094 0.0087 0.0081 0.0078 0.0076 0.0077
          0.0143 0.0137 0.0130 0.0122 0.0113 0.0104 0.0096 0.0089 0.0082 0.0077 0.0073 0.0072 0.0072
          0.0134 0.0129 0.0122 0.0114 0.0106 0.0098 0.0091 0.0083 0.0077 0.0072 0.0069 0.0067 0.0068
          0.0126 0.0121 0.0114 0.0107 0.0100 0.0092 0.0085 0.0078 0.0072 0.0068 0.0065 0.0063 0.0064
          0.0118 0.0113 0.0107 0.0100 0.0093 0.0086 0.0079 0.0073 0.0068 0.0063 0.0060 0.0059 0.0060
          0.0109 0.0105 0.0099 0.0093 0.0086 0.0080 0.0074 0.0068 0.0063 0.0059 0.0056 0.0055 0.0055
          0.0101 0.0097 0.0092 0.0086 0.0080 0.0074 0.0068 0.0063 0.0058 0.0054 0.0052 0.0051 0.0051
          0.0092 0.0089 0.0084 0.0079 0.0073 0.0068 0.0062 0.0057 0.0053 0.0050 0.0047 0.0046 0.0047
          0.0084 0.0080 0.0076 0.0072 0.0067 0.0061 0.0057 0.0052 0.0048 0.0045 0.0043 0.0042 0.0043
          0.0076 0.0072 0.0069 0.0064 0.0060 0.0055 0.0051 0.0047 0.0043 0.0041 0.0039 0.0038 0.0038
          0.0067 0.0064 0.0061 0.0057 0.0053 0.0049 0.0045 0.0042 0.0039 0.0036 0.0035 0.0034 0.0034
          0.0059 0.0056 0.0053 0.0050 0.0047 0.0043 0.0040 0.0037 0.0034 0.0032 0.0030 0.0030 0.0030
          0.0050 0.0048 0.0046 0.0043 0.0040 0.0037 0.0034 0.0031 0.0029 0.0027 0.0026 0.0025 0.0026
          0.0042 0.0040 0.0038 0.0036 0.0033 0.0031 0.0028 0.0026 0.0024 0.0023 0.0022 0.0021 0.0021
          0.0034 0.0032 0.0031 0.0029 0.0027 0.0025 0.0023 0.0021 0.0019 0.0018 0.0017 0.0017 0.0017
          0.0025 0.0024 0.0023 0.0021 0.0020 0.0018 0.0017 0.0016 0.0015 0.0014 0.0013 0.0013 0.0013
          0.0017 0.0016 0.0015 0.0014 0.0013 0.0012 0.0011 0.0010 0.0010 0.0009 0.0009 0.0008 0.0009
          0.0008 0.0008 0.0008 0.0007 0.0007 0.0006 0.0006 0.0005 0.0005 0.0005 0.0004 0.0004 0.0004
          0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
          0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
          0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
          0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
          0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
          0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000];
end

function mat = getMP2014Female();
  % gets a matrix of mortality improvement rates for all female healthy annuitants
  % ages 50-120 for years 2015 through 2027from the MP-2014 table
   mat = [0.0133 0.0140 0.0142 0.0140 0.0134 0.0126 0.0118 0.0111 0.0105 0.0101 0.0100 0.0100 0.0100
          0.0111 0.0122 0.0128 0.0130 0.0128 0.0123 0.0116 0.0110 0.0105 0.0102 0.0100 0.0100 0.0100
          0.0092 0.0105 0.0114 0.0119 0.0121 0.0119 0.0115 0.0109 0.0105 0.0102 0.0100 0.0100 0.0100
          0.0077 0.0091 0.0102 0.0110 0.0114 0.0115 0.0113 0.0110 0.0106 0.0103 0.0101 0.0100 0.0100
          0.0066 0.0080 0.0093 0.0103 0.0109 0.0112 0.0111 0.0109 0.0106 0.0103 0.0101 0.0100 0.0100
          0.0061 0.0074 0.0087 0.0097 0.0105 0.0109 0.0110 0.0109 0.0107 0.0104 0.0102 0.0100 0.0100
          0.0061 0.0072 0.0084 0.0094 0.0102 0.0108 0.0110 0.0110 0.0108 0.0105 0.0102 0.0101 0.0100
          0.0068 0.0075 0.0084 0.0094 0.0101 0.0107 0.0110 0.0110 0.0108 0.0106 0.0103 0.0101 0.0100
          0.0080 0.0083 0.0088 0.0095 0.0102 0.0107 0.0110 0.0111 0.0109 0.0106 0.0103 0.0101 0.0100
          0.0095 0.0094 0.0095 0.0099 0.0104 0.0108 0.0110 0.0111 0.0110 0.0107 0.0104 0.0101 0.0100
          0.0113 0.0107 0.0105 0.0105 0.0107 0.0109 0.0111 0.0111 0.0110 0.0107 0.0104 0.0101 0.0100
          0.0132 0.0122 0.0115 0.0112 0.0110 0.0111 0.0111 0.0111 0.0109 0.0107 0.0104 0.0101 0.0100
          0.0149 0.0137 0.0127 0.0119 0.0115 0.0113 0.0111 0.0110 0.0109 0.0106 0.0104 0.0101 0.0100
          0.0164 0.0150 0.0138 0.0128 0.0120 0.0115 0.0112 0.0110 0.0108 0.0106 0.0103 0.0101 0.0100
          0.0177 0.0162 0.0148 0.0136 0.0126 0.0118 0.0113 0.0110 0.0108 0.0105 0.0103 0.0101 0.0100
          0.0188 0.0172 0.0157 0.0143 0.0132 0.0122 0.0115 0.0111 0.0107 0.0105 0.0103 0.0101 0.0100     
          0.0197 0.0181 0.0165 0.0150 0.0137 0.0126 0.0118 0.0112 0.0107 0.0104 0.0102 0.0101 0.0100
          0.0204 0.0188 0.0172 0.0157 0.0143 0.0131 0.0121 0.0114 0.0108 0.0105 0.0102 0.0101 0.0100
          0.0210 0.0195 0.0179 0.0163 0.0149 0.0136 0.0125 0.0116 0.0109 0.0105 0.0102 0.0101 0.0100
          0.0214 0.0200 0.0184 0.0169 0.0154 0.0140 0.0128 0.0118 0.0111 0.0106 0.0102 0.0101 0.0100
          0.0217 0.0204 0.0189 0.0173 0.0158 0.0144 0.0131 0.0121 0.0113 0.0107 0.0103 0.0101 0.0100
          0.0218 0.0206 0.0192 0.0177 0.0162 0.0147 0.0134 0.0123 0.0114 0.0108 0.0103 0.0101 0.0100
          0.0217 0.0206 0.0193 0.0179 0.0164 0.0150 0.0137 0.0125 0.0116 0.0108 0.0104 0.0101 0.0100
          0.0215 0.0205 0.0193 0.0180 0.0166 0.0152 0.0139 0.0127 0.0117 0.0109 0.0104 0.0101 0.0100
          0.0211 0.0202 0.0191 0.0179 0.0166 0.0153 0.0140 0.0128 0.0118 0.0110 0.0104 0.0101 0.0100
          0.0208 0.0199 0.0189 0.0178 0.0166 0.0153 0.0141 0.0129 0.0119 0.0111 0.0105 0.0101 0.0100
          0.0206 0.0197 0.0187 0.0176 0.0165 0.0153 0.0141 0.0130 0.0119 0.0111 0.0105 0.0101 0.0100 
          0.0204 0.0195 0.0185 0.0174 0.0164 0.0152 0.0141 0.0130 0.0120 0.0111 0.0105 0.0101 0.0100
          0.0203 0.0193 0.0183 0.0173 0.0162 0.0151 0.0140 0.0130 0.0120 0.0112 0.0105 0.0101 0.0100
          0.0203 0.0193 0.0183 0.0172 0.0161 0.0150 0.0140 0.0130 0.0120 0.0112 0.0105 0.0101 0.0100
          0.0203 0.0194 0.0183 0.0172 0.0161 0.0150 0.0139 0.0130 0.0120 0.0112 0.0106 0.0101 0.0100
          0.0204 0.0195 0.0184 0.0173 0.0161 0.0150 0.0139 0.0129 0.0120 0.0112 0.0106 0.0102 0.0100
          0.0206 0.0196 0.0185 0.0174 0.0162 0.0150 0.0139 0.0129 0.0120 0.0112 0.0106 0.0102 0.0100
          0.0208 0.0198 0.0187 0.0175 0.0163 0.0151 0.0139 0.0129 0.0119 0.0112 0.0106 0.0102 0.0100
          0.0210 0.0200 0.0189 0.0177 0.0164 0.0152 0.0140 0.0129 0.0119 0.0111 0.0105 0.0102 0.0100
          0.0213 0.0202 0.0191 0.0178 0.0165 0.0153 0.0140 0.0129 0.0119 0.0111 0.0105 0.0101 0.0100
          0.0215 0.0204 0.0192 0.0179 0.0166 0.0153 0.0140 0.0128 0.0118 0.0110 0.0103 0.0099 0.0099
          0.0217 0.0205 0.0192 0.0179 0.0166 0.0153 0.0140 0.0128 0.0117 0.0108 0.0102 0.0098 0.0097
          0.0218 0.0205 0.0192 0.0178 0.0165 0.0152 0.0139 0.0127 0.0116 0.0107 0.0100 0.0096 0.0096
          0.0217 0.0204 0.0190 0.0176 0.0162 0.0149 0.0137 0.0125 0.0114 0.0105 0.0099 0.0095 0.0094
          0.0216 0.0203 0.0189 0.0174 0.0160 0.0147 0.0134 0.0123 0.0113 0.0104 0.0097 0.0093 0.0093
          0.0214 0.0201 0.0187 0.0172 0.0158 0.0144 0.0131 0.0120 0.0111 0.0102 0.0096 0.0092 0.0091
          0.0212 0.0199 0.0185 0.0170 0.0156 0.0142 0.0129 0.0117 0.0108 0.0101 0.0094 0.0090 0.0090
          0.0208 0.0196 0.0182 0.0168 0.0153 0.0139 0.0126 0.0115 0.0105 0.0098 0.0093 0.0089 0.0088
          0.0204 0.0193 0.0179 0.0165 0.0150 0.0136 0.0123 0.0112 0.0102 0.0095 0.0090 0.0087 0.0087
          0.0199 0.0188 0.0176 0.0162 0.0147 0.0133 0.0120 0.0109 0.0099 0.0092 0.0087 0.0084 0.0085
          0.0189 0.0179 0.0167 0.0154 0.0140 0.0127 0.0114 0.0103 0.0094 0.0087 0.0082 0.0080 0.0081
          0.0179 0.0169 0.0158 0.0146 0.0133 0.0120 0.0108 0.0098 0.0089 0.0083 0.0078 0.0076 0.0077
          0.0169 0.0160 0.0149 0.0137 0.0125 0.0113 0.0102 0.0092 0.0084 0.0078 0.0074 0.0072 0.0072
          0.0159 0.0151 0.0140 0.0129 0.0118 0.0107 0.0096 0.0087 0.0079 0.0073 0.0069 0.0068 0.0068
          0.0149 0.0141 0.0132 0.0121 0.0111 0.0100 0.0090 0.0082 0.0074 0.0069 0.0065 0.0063 0.0064
          0.0139 0.0132 0.0123 0.0113 0.0103 0.0093 0.0084 0.0076 0.0069 0.0064 0.0061 0.0059 0.0060
          0.0129 0.0122 0.0114 0.0105 0.0096 0.0087 0.0078 0.0071 0.0064 0.0060 0.0056 0.0055 0.0055
          0.0119 0.0113 0.0105 0.0097 0.0088 0.0080 0.0072 0.0065 0.0059 0.0055 0.0052 0.0051 0.0051
          0.0109 0.0104 0.0097 0.0089 0.0081 0.0073 0.0066 0.0060 0.0055 0.0050 0.0048 0.0046 0.0047
          0.0099 0.0094 0.0088 0.0081 0.0074 0.0067 0.0060 0.0054 0.0050 0.0046 0.0043 0.0042 0.0043
          0.0089 0.0085 0.0079 0.0073 0.0066 0.0060 0.0054 0.0049 0.0045 0.0041 0.0039 0.0038 0.0038
          0.0080 0.0075 0.0070 0.0065 0.0059 0.0053 0.0048 0.0044 0.0040 0.0037 0.0035 0.0034 0.0034
          0.0070 0.0066 0.0061 0.0057 0.0052 0.0047 0.0042 0.0038 0.0035 0.0032 0.0030 0.0030 0.0030
          0.0060 0.0057 0.0053 0.0049 0.0044 0.0040 0.0036 0.0033 0.0030 0.0028 0.0026 0.0025 0.0026
          0.0050 0.0047 0.0044 0.0040 0.0037 0.0033 0.0030 0.0027 0.0025 0.0023 0.0022 0.0021 0.0021
          0.0040 0.0038 0.0035 0.0032 0.0029 0.0027 0.0024 0.0022 0.0020 0.0018 0.0017 0.0017 0.0017
          0.0030 0.0028 0.0026 0.0024 0.0022 0.0020 0.0018 0.0016 0.0015 0.0014 0.0013 0.0013 0.0013
          0.0020 0.0019 0.0018 0.0016 0.0015 0.0013 0.0012 0.0011 0.0010 0.0009 0.0009 0.0008 0.0009
          0.0010 0.0009 0.0009 0.0008 0.0007 0.0007 0.0006 0.0005 0.0005 0.0005 0.0004 0.0004 0.0004
          0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
          0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
          0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
          0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
          0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
          0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000];
end


